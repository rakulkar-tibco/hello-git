asyncapi: "2.1.0"
info:
  version: "22"
  title: "Kafka"
  x-channel-name: "/Channels/KafkaChannel"
channels:
  /Channels/KafkaChannel/orderDest:
    subscribe:
      operationId: "Channels_KafkaChannel_orderDest"
      message:
        $ref: "#/components/messages/OrderEvent"
      x-dest-properties:
        compression.type: "none"
        sync.sender: "true"
        session.timeout.msec: "30000"
        group.id: "be_group"
        autocommit.interval: "5000"
        IncludeEventType: "ALWAYS"
        message.key.rf: "/RuleFunctions/OrderKeyRF"
        sync.sender.max.wait: "30000"
        serializer-deserializer-class: "com.tibco.cep.driver.kafka.serializer.KafkaMapSerializer"
        enable.autocommit: "true"
        topic.name: "be_kafka_topic"
        heartbeat.interval.msec: "3000"
        consumer.threads: "1"
  /Channels/KafkaChannel/customerSignup:
    subscribe:
      operationId: "Channels_KafkaChannel_customerSignup"
      message:
        $ref: "#/components/messages/CustomerSignup"
      x-dest-properties:
        compression.type: "none"
        sync.sender: "false"
        session.timeout.msec: "30000"
        group.id: "be_group"
        autocommit.interval: "5000"
        IncludeEventType: "ALWAYS"
        sync.sender.max.wait: "30000"
        serializer-deserializer-class: "com.tibco.cep.driver.kafka.serializer.KafkaJsonSerializer"
        enable.autocommit: "true"
        topic.name: "be_kafka_topic_customer"
        heartbeat.interval.msec: "3000"
        consumer.threads: "1"
servers:
  default:
    url: "localhost:9092"
    protocol: "Kafka"
    x-config-properties:
      kafka.security.protocol: "PLAINTEXT"
      kafka.sasl.mechanism: "PLAIN"
      kafka.broker.urls: "localhost:9092"
components:
  schemas:
    OrderEvent:
      type: "object"
      properties:
        _ns_:
          type: "string"
        _extId_:
          type: "string"
        customer_id:
          type: "string"
        order_id:
          type: "string"
        _nm_:
          type: "string"
    CustomerSignup:
      type: "object"
      properties:
        _ns_:
          type: "string"
        _extId_:
          type: "string"
        ref_code:
          type: "string"
        _nm_:
          type: "string"
  messages:
    OrderEvent:
      payload:
        $ref: "#/components/schemas/OrderEvent"
      examples:
          - john:
              summary: Example for John Doe user
              headers:
                content-type: application/json
                sentAt: "2020-03-11T08:03:38Z"
              payload:
                _ns_: test
                _extId_: test
                _nm_: test
                customer_id: john
                order_id: 1001
          - Bob:
              summary: Example for John Doe user
              headers:
                content-type: application/json
                sentAt: "2020-03-11T08:03:38Z"
              payload:
                _ns_: "www.tibco.com/be/ontology/Events/OrderEvent"
                _extId_: test
                _nm_: OrderEvent
                customer_id: CUST_5
                order_id: 1001
    CustomerSignup:
      payload:
        $ref: "#/components/schemas/CustomerSignup"
      
